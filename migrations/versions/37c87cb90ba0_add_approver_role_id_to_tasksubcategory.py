"""Add approver_role_id to TaskSubcategory,

Revision ID: 37c87cb90ba0
Revises: e279648b9350
Create Date: 2025-10-13 17:21:25.123248

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '37c87cb90ba0'
down_revision = 'e279648b9350'
branch_labels = None
depends_on = None

# Definir os valores dos ENUMs.
# É CRUCIAL que estes valores correspondam **exatamente** aos valores em seu models.py
ENUM_VALUES = ('TEXT', 'TEXTAREA', 'DATE', 'TIME', 'DATETIME', 'NUMBER', 'BOOLEAN', 'IMAGE', 'FILE', 'URL', 'REFERENCE_BIBLICA', 'SELECT')
OLD_ENUM_NAME = 'field_type_enum'
NEW_ENUM_NAME = 'custom_field_type_enum'

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # --- INÍCIO: Seção para lidar com a migração do ENUM de forma robusta ---

    # 1. Crie o novo tipo ENUM, se ele ainda não existir.
    #    Isso lida com o caso em que 'custom_field_type_enum' já existe (como no erro anterior)
    #    e também com o caso de uma migração limpa.
    op.execute(f"DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = '{NEW_ENUM_NAME}') THEN CREATE TYPE {NEW_ENUM_NAME} AS ENUM {str(ENUM_VALUES)}; END IF; END $$;")

    # 2. Altere o tipo da coluna 'custom_field_type' da tabela 'task_checklist_item' para o novo ENUM.
    #    Usa a conversão explícita ::TEXT para evitar o erro 'CannotCoerce'.
    op.alter_column(
        'task_checklist_item',
        'custom_field_type',
        existing_type=postgresql.ENUM(*ENUM_VALUES, name=OLD_ENUM_NAME, create_type=False),
        type_=postgresql.ENUM(*ENUM_VALUES, name=NEW_ENUM_NAME, create_type=False),
        existing_nullable=True,
        nullable=True, # VERIFICAR: Nulabilidade da coluna custom_field_type no seu models.py
        postgresql_using=f"custom_field_type::TEXT::{NEW_ENUM_NAME}"
    )

    # 3. Altere o tipo da coluna 'field_type' da tabela 'checklist_item_template' para o novo ENUM.
    #    Este é o segundo objeto dependente mencionado no erro!
    op.alter_column(
        'checklist_item_template',
        'field_type',
        existing_type=postgresql.ENUM(*ENUM_VALUES, name=OLD_ENUM_NAME, create_type=False),
        type_=postgresql.ENUM(*ENUM_VALUES, name=NEW_ENUM_NAME, create_type=False),
        existing_nullable=True, # VERIFICAR: Nulabilidade da coluna field_type no seu models.py
        nullable=True,           # VERIFICAR: Nulabilidade da coluna field_type no seu models.py
        postgresql_using=f"field_type::TEXT::{NEW_ENUM_NAME}"
    )

    # 4. Remova o tipo ENUM antigo, se ele existir, usando **CASCADE**.
    #    O CASCADE é ESSENCIAL aqui para remover quaisquer outras dependências não óbvias.
    op.execute(f"""
        DO $$
        BEGIN
            IF EXISTS (SELECT 1 FROM pg_type WHERE typname = '{OLD_ENUM_NAME}') THEN
                DROP TYPE {OLD_ENUM_NAME} CASCADE;
            END IF;
        END
        $$;
    """)

    # --- FIM: Seção para lidar com a migração do ENUM ---


    # Comandos originais gerados pelo Alembic (fora do problema do ENUM)
    with op.batch_alter_table('attachment', schema=None) as batch_op:
        batch_op.create_foreign_key('fk_attachment_uploaded_by_user_id', 'user', ['uploaded_by_user_id'], ['id'])

    with op.batch_alter_table('task_subcategory', schema=None) as batch_op:
        batch_op.add_column(sa.Column('approver_role_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key(batch_op.f('fk_task_subcategory_approver_role_id_role'), 'role', ['approver_role_id'], ['id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # --- INÍCIO: Seção para lidar com a reversão do ENUM de forma robusta ---

    # 1. Crie o tipo ENUM antigo, se ele ainda não existir.
    op.execute(f"DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = '{OLD_ENUM_NAME}') THEN CREATE TYPE {OLD_ENUM_NAME} AS ENUM {str(ENUM_VALUES)}; END IF; END $$;")

    # 2. Altere o tipo da coluna 'custom_field_type' da tabela 'task_checklist_item' de volta para o ENUM antigo.
    op.alter_column(
        'task_checklist_item',
        'custom_field_type',
        existing_type=postgresql.ENUM(*ENUM_VALUES, name=NEW_ENUM_NAME, create_type=False),
        type_=postgresql.ENUM(*ENUM_VALUES, name=OLD_ENUM_NAME, create_type=False),
        existing_nullable=True,
        nullable=True,
        postgresql_using=f"custom_field_type::TEXT::{OLD_ENUM_NAME}"
    )

    # 3. Altere o tipo da coluna 'field_type' da tabela 'checklist_item_template' de volta para o ENUM antigo.
    op.alter_column(
        'checklist_item_template',
        'field_type',
        existing_type=postgresql.ENUM(*ENUM_VALUES, name=NEW_ENUM_NAME, create_type=False),
        type_=postgresql.ENUM(*ENUM_VALUES, name=OLD_ENUM_NAME, create_type=False),
        existing_nullable=True,
        nullable=True,
        postgresql_using=f"field_type::TEXT::{OLD_ENUM_NAME}"
    )

    # 4. Remova o tipo ENUM novo, se ele existir, usando **CASCADE**.
    op.execute(f"""
        DO $$
        BEGIN
            IF EXISTS (SELECT 1 FROM pg_type WHERE typname = '{NEW_ENUM_NAME}') THEN
                DROP TYPE {NEW_ENUM_NAME} CASCADE;
            END IF;
        END
        $$;
    """)

    # --- FIM: Seção para lidar com a reversão do ENUM ---


    # Comandos originais gerados pelo Alembic (fora do problema do ENUM)
    with op.batch_alter_table('task_subcategory', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('fk_task_subcategory_approver_role_id_role'), type_='foreignkey')
        batch_op.drop_column('approver_role_id')

    with op.batch_alter_table('attachment', schema=None) as batch_op:
        batch_op.drop_constraint('fk_attachment_uploaded_by_user_id', type_='foreignkey')

    # ### end Alembic commands ###