"""Initial migration - v1 schema

Revision ID: 814925bfbc4b
Revises: 
Create Date: 2025-09-23 16:39:39.195471

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '814925bfbc4b'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('category',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=200), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('group',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=200), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('role',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=200), nullable=True),
    sa.Column('can_view_event', sa.Boolean(), nullable=False),
    sa.Column('can_edit_event', sa.Boolean(), nullable=False),
    sa.Column('can_manage_permissions', sa.Boolean(), nullable=False),
    sa.Column('can_create_event', sa.Boolean(), nullable=False),
    sa.Column('can_create_task', sa.Boolean(), nullable=False),
    sa.Column('can_edit_task', sa.Boolean(), nullable=False),
    sa.Column('can_delete_task', sa.Boolean(), nullable=False),
    sa.Column('can_complete_task', sa.Boolean(), nullable=False),
    sa.Column('can_uncomplete_task', sa.Boolean(), nullable=False),
    sa.Column('can_upload_task_audio', sa.Boolean(), nullable=False),
    sa.Column('can_delete_task_audio', sa.Boolean(), nullable=False),
    sa.Column('can_view_task_history', sa.Boolean(), nullable=False),
    sa.Column('can_manage_task_comments', sa.Boolean(), nullable=False),
    sa.Column('can_upload_attachments', sa.Boolean(), nullable=False),
    sa.Column('can_manage_attachments', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('status',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('type', sa.String(length=20), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'type', name='_name_type_uc')
    )
    op.create_table('task_category',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=200), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=20), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('password_hash', sa.String(length=200), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('image_file', sa.String(length=20), nullable=False),
    sa.Column('is_active_db', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], name='fk_user_role_id'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_table('change_log_entry',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('action', sa.String(length=50), nullable=False),
    sa.Column('record_type', sa.String(length=50), nullable=False),
    sa.Column('record_id', sa.Integer(), nullable=True),
    sa.Column('old_data', sa.JSON(), nullable=True),
    sa.Column('new_data', sa.JSON(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='fk_changelog_user_id'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('event',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('due_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('location', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('author_id', sa.Integer(), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.Column('status_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['user.id'], name='fk_event_author_id'),
    sa.ForeignKeyConstraint(['category_id'], ['category.id'], name='fk_event_category_id'),
    sa.ForeignKeyConstraint(['status_id'], ['status.id'], name='fk_event_status_id'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('password_reset_token',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('token_uuid', sa.String(length=36), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('expiration_date', sa.DateTime(), nullable=False),
    sa.Column('is_used', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='fk_password_reset_token_user_id'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('token_uuid')
    )
    op.create_table('user_group',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], name='fk_user_group_group_id'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='fk_user_group_user_id'),
    sa.PrimaryKeyConstraint('user_id', 'group_id')
    )
    op.create_table('event_permission',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('event_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('(user_id IS NOT NULL AND group_id IS NULL) OR (user_id IS NULL AND group_id IS NOT NULL)', name='_user_or_group_check'),
    sa.ForeignKeyConstraint(['event_id'], ['event.id'], name='fk_event_permission_event_id'),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], name='fk_event_permission_group_id', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], name='fk_event_permission_role_id'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='fk_event_permission_user_id', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('event_permission', schema=None) as batch_op:
        batch_op.create_index('_event_group_unique_idx', ['event_id', 'group_id'], unique=True, postgresql_where=sa.text('group_id IS NOT NULL'))
        batch_op.create_index('_event_user_unique_idx', ['event_id', 'user_id'], unique=True, postgresql_where=sa.text('user_id IS NOT NULL'))

    op.create_table('task',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('due_date', sa.DateTime(), nullable=False),
    sa.Column('original_due_date', sa.DateTime(), nullable=True),
    sa.Column('cloud_storage_link', sa.String(length=500), nullable=True),
    sa.Column('link_notes', sa.Text(), nullable=True),
    sa.Column('audio_path', sa.String(length=500), nullable=True),
    sa.Column('audio_duration_seconds', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('event_id', sa.Integer(), nullable=False),
    sa.Column('task_status_id', sa.Integer(), nullable=False),
    sa.Column('task_category_id', sa.Integer(), nullable=True),
    sa.Column('is_completed', sa.Boolean(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('completed_by_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['completed_by_id'], ['user.id'], name='fk_task_completed_by_id'),
    sa.ForeignKeyConstraint(['event_id'], ['event.id'], name='fk_task_event_id'),
    sa.ForeignKeyConstraint(['task_category_id'], ['task_category.id'], name='fk_task_task_category_id'),
    sa.ForeignKeyConstraint(['task_status_id'], ['status.id'], name='fk_task_status_id'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('attachment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('filename', sa.String(length=255), nullable=False),
    sa.Column('unique_filename', sa.String(length=255), nullable=False),
    sa.Column('storage_path', sa.String(length=500), nullable=False),
    sa.Column('mimetype', sa.String(length=100), nullable=True),
    sa.Column('filesize', sa.Integer(), nullable=True),
    sa.Column('uploaded_by_user_id', sa.Integer(), nullable=False),
    sa.Column('upload_timestamp', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['task_id'], ['task.id'], name='fk_attachment_task_id'),
    sa.ForeignKeyConstraint(['uploaded_by_user_id'], ['user.id'], name='fk_attachment_uploaded_by_user_id'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('unique_filename')
    )
    op.create_table('comment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['task_id'], ['task.id'], name='fk_comment_task_id'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='fk_comment_user_id'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('task_assignment',
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['task_id'], ['task.id'], name='fk_task_assignment_task_id'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='fk_task_assignment_user_id'),
    sa.PrimaryKeyConstraint('task_id', 'user_id')
    )
    op.create_table('task_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('action_type', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('old_value', sa.Text(), nullable=True),
    sa.Column('new_value', sa.Text(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['task.id'], name='fk_task_history_task_id'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='fk_task_history_user_id'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('task_history')
    op.drop_table('task_assignment')
    op.drop_table('comment')
    op.drop_table('attachment')
    op.drop_table('task')
    with op.batch_alter_table('event_permission', schema=None) as batch_op:
        batch_op.drop_index('_event_user_unique_idx', postgresql_where=sa.text('user_id IS NOT NULL'))
        batch_op.drop_index('_event_group_unique_idx', postgresql_where=sa.text('group_id IS NOT NULL'))

    op.drop_table('event_permission')
    op.drop_table('user_group')
    op.drop_table('password_reset_token')
    op.drop_table('event')
    op.drop_table('change_log_entry')
    op.drop_table('user')
    op.drop_table('task_category')
    op.drop_table('status')
    op.drop_table('role')
    op.drop_table('group')
    op.drop_table('category')
    # ### end Alembic commands ###
