"""Gerar modelos completos para checklist e anexos

Revision ID: e279648b9350
Revises: 7e4682f4796d
Create Date: 2025-10-12 22:09:49.726026

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
# Importar o FieldType Enum (assumindo que app.models existe e FieldType está lá)
# Se der erro de importação, talvez precise ajustar o sys.path no env.py
# ou remover esta linha se não for estritamente necessário para o Alembic.
# No entanto, para tipos Enum é geralmente bom ter.
try:
    from app.models import FieldType
except ImportError:
    # Fallback se o import falhar, caso FieldType não esteja em um módulo acessível pelo Alembic.
    # Alembic gerencia Enums automaticamente, mas esta linha ajuda em alguns casos.
    FieldType = sa.Enum('TEXT', 'TEXTAREA', 'DATE', 'TIME', 'DATETIME', 'NUMBER', 'BOOLEAN', 'IMAGE', 'FILE', 'URL', 'REFERENCE_BIBLICA', 'SELECT', name='field_type_enum', create_type=False)


# revision identifiers, used by Alembic.
revision = 'e279648b9350'
down_revision = '7e4682f4796d'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('checklist_template',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('comment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['task_id'], ['task.id'], name='fk_comment_task_id'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='fk_comment_user_id'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('push_subscription',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('endpoint', sa.String(length=512), nullable=False),
    sa.Column('p256dh', sa.String(length=255), nullable=False),
    sa.Column('auth', sa.String(length=255), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('endpoint')
    )
    with op.batch_alter_table('push_subscription', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_push_subscription_timestamp'), ['timestamp'], unique=False)

    with op.batch_alter_table('role', schema=None) as batch_op:
        batch_op.add_column(sa.Column('can_publish_event', sa.Boolean(), nullable=False, server_default='FALSE'))
        batch_op.add_column(sa.Column('can_cancel_event', sa.Boolean(), nullable=False, server_default='FALSE'))
        batch_op.add_column(sa.Column('can_duplicate_event', sa.Boolean(), nullable=False, server_default='FALSE'))
        batch_op.add_column(sa.Column('can_view_event_registrations', sa.Boolean(), nullable=False, server_default='FALSE'))
        batch_op.add_column(sa.Column('can_view_event_reports', sa.Boolean(), nullable=False, server_default='FALSE'))
        batch_op.add_column(sa.Column('can_approve_art', sa.Boolean(), nullable=False, server_default='FALSE'))
        batch_op.add_column(sa.Column('can_create_task', sa.Boolean(), nullable=False, server_default='FALSE'))
        batch_op.add_column(sa.Column('can_edit_task', sa.Boolean(), nullable=False, server_default='FALSE'))
        batch_op.add_column(sa.Column('can_delete_task', sa.Boolean(), nullable=False, server_default='FALSE'))
        batch_op.add_column(sa.Column('can_complete_task', sa.Boolean(), nullable=False, server_default='FALSE'))
        batch_op.add_column(sa.Column('can_uncomplete_task', sa.Boolean(), nullable=False, server_default='FALSE'))
        batch_op.add_column(sa.Column('can_upload_task_audio', sa.Boolean(), nullable=False, server_default='FALSE'))
        batch_op.add_column(sa.Column('can_delete_task_audio', sa.Boolean(), nullable=False, server_default='FALSE'))
        batch_op.add_column(sa.Column('can_view_task_history', sa.Boolean(), nullable=False, server_default='FALSE'))
        batch_op.add_column(sa.Column('can_manage_task_comments', sa.Boolean(), nullable=False, server_default='FALSE'))
        batch_op.add_column(sa.Column('can_upload_attachments', sa.Boolean(), nullable=False, server_default='FALSE'))
        batch_op.add_column(sa.Column('can_manage_attachments', sa.Boolean(), nullable=False, server_default='FALSE'))

    op.create_table('checklist_item_template',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('checklist_template_id', sa.Integer(), nullable=False),
    sa.Column('label', sa.String(length=255), nullable=False),
    sa.Column('field_type', FieldType, nullable=False), # Usando o Enum importado
    sa.Column('is_required', sa.Boolean(), nullable=False),
    sa.Column('order', sa.Integer(), nullable=False),
    sa.Column('min_images', sa.Integer(), nullable=True),
    sa.Column('max_images', sa.Integer(), nullable=True),
    sa.Column('options', sa.Text(), nullable=True),
    sa.Column('placeholder', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['checklist_template_id'], ['checklist_template.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('task_subcategory', schema=None) as batch_op:
        batch_op.add_column(sa.Column('requires_art_approval_on_images', sa.Boolean(), nullable=False, server_default='FALSE'))
        batch_op.add_column(sa.Column('checklist_template_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key(batch_op.f('fk_task_subcategory_checklist_template_id'), 'checklist_template', ['checklist_template_id'], ['id'])

    # --- INÍCIO DA REVISÃO PARA 'TASK' E 'ATTACHMENT' ---

    # Etapa 1 para 'task': Adicionar 'creator_id' como nullable=True
    with op.batch_alter_table('task', schema=None) as batch_op:
        batch_op.add_column(sa.Column('creator_id', sa.Integer(), nullable=True))

    # Etapa 2 para 'task': Preencher 'creator_id' com o valor padrão (5)
    with op.batch_alter_table('task', schema=None) as batch_op:
        batch_op.execute("UPDATE task SET creator_id = 5 WHERE creator_id IS NULL")

    # Etapa 3 para 'task': Alterar 'creator_id' para nullable=False e adicionar Foreign Key
    with op.batch_alter_table('task', schema=None) as batch_op:
        batch_op.alter_column('creator_id', existing_type=sa.Integer(), nullable=False)
        batch_op.create_foreign_key(batch_op.f('fk_task_creator_id'), 'user', ['creator_id'], ['id'])

    # *** ATENÇÃO: MOVIDO PARA CÁ PARA QUE EXISTAM ANTES DE 'ATTACHMENT' REFERENCIÁ-LAS ***
    op.create_table('task_checklist',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('task_subcategory_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['task_id'], ['task.id'], ),
    sa.ForeignKeyConstraint(['task_subcategory_id'], ['task_subcategory.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('task_id')
    )
    op.create_table('task_checklist_item',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('task_checklist_id', sa.Integer(), nullable=False),
    sa.Column('checklist_item_template_id', sa.Integer(), nullable=True),
    sa.Column('label', sa.String(length=255), nullable=False),
    sa.Column('field_type', FieldType, nullable=False), # Usando o Enum importado
    sa.Column('custom_label', sa.String(length=255), nullable=True),
    sa.Column('custom_field_type', FieldType, nullable=True), # Usando o Enum importado
    sa.Column('is_required', sa.Boolean(), nullable=False),
    sa.Column('order', sa.Integer(), nullable=False),
    sa.Column('value_text', sa.Text(), nullable=True),
    sa.Column('value_date', sa.Date(), nullable=True),
    sa.Column('value_time', sa.Time(), nullable=True),
    sa.Column('value_datetime', sa.DateTime(), nullable=True),
    sa.Column('value_number', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('value_boolean', sa.Boolean(), nullable=True),
    sa.Column('is_completed', sa.Boolean(), nullable=False, server_default='FALSE'), # Added server_default
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('completed_by_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['checklist_item_template_id'], ['checklist_item_template.id'], ),
    sa.ForeignKeyConstraint(['completed_by_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['task_checklist_id'], ['task_checklist.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # *** FIM DA MOVIMENTAÇÃO DE CRIAÇÃO DE TABELAS ***


    # Renomeação de 'upload_timestamp' para 'uploaded_at' e ajustes no Attachment
    with op.batch_alter_table('attachment', schema=None) as batch_op:
        batch_op.alter_column('upload_timestamp', new_column_name='uploaded_at', existing_type=sa.DateTime(), nullable=False)
        # Agora task_checklist_item já existe, então podemos adicionar esta coluna e FK.
        batch_op.add_column(sa.Column('task_checklist_item_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key(batch_op.f('fk_attachment_task_checklist_item_id'), 'task_checklist_item', ['task_checklist_item_id'], ['id'])

        # Ajuste do tipo para filesize, se necessário.
        batch_op.alter_column('filesize', existing_type=sa.INTEGER(), type_=sa.BigInteger(), nullable=True) # Corrigindo para BigInteger se não foi feito.

    # Etapa 1 para 'attachment': Adicionar 'uploaded_by_user_id' como nullable=True
    with op.batch_alter_table('attachment', schema=None) as batch_op:
        batch_op.add_column(sa.Column('uploaded_by_user_id', sa.Integer(), nullable=True))

    # Etapa 2 para 'attachment': Preencher 'uploaded_by_user_id' com o valor padrão (5)
    with op.batch_alter_table('attachment', schema=None) as batch_op:
        batch_op.execute("UPDATE attachment SET uploaded_by_user_id = 5 WHERE uploaded_by_user_id IS NULL")
        
    # Etapa 3 para 'attachment': Alterar 'uploaded_by_user_id' para nullable=False
    with op.batch_alter_table('attachment', schema=None) as batch_op:
        batch_op.alter_column('uploaded_by_user_id', existing_type=sa.INTEGER(), nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('task_checklist_item')
    op.drop_table('task_checklist')
    
    # Downgrade para Attachment
    with op.batch_alter_table('attachment', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('fk_attachment_task_checklist_item_id'), type_='foreignkey')
        batch_op.drop_column('task_checklist_item_id')
        batch_op.drop_column('uploaded_by_user_id') # Removendo a coluna no downgrade.
        # Reverter o tipo para filesize, se foi alterado no upgrade.
        batch_op.alter_column('filesize', existing_type=sa.BigInteger(), type_=sa.INTEGER(), nullable=True)
        batch_op.alter_column('uploaded_at', new_column_name='upload_timestamp', existing_type=sa.DateTime(), nullable=False)

    # Downgrade para Task
    with op.batch_alter_table('task', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('fk_task_creator_id'), type_='foreignkey')
        batch_op.drop_column('creator_id') # Removendo a coluna no downgrade.

    with op.batch_alter_table('task_subcategory', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('fk_task_subcategory_checklist_template_id'), type_='foreignkey')
        batch_op.drop_column('checklist_template_id')
        batch_op.drop_column('requires_art_approval_on_images')

    op.drop_table('checklist_item_template')
    with op.batch_alter_table('role', schema=None) as batch_op:
        batch_op.drop_column('can_manage_attachments')
        batch_op.drop_column('can_upload_attachments')
        batch_op.drop_column('can_manage_task_comments')
        batch_op.drop_column('can_view_task_history')
        batch_op.drop_column('can_delete_task_audio')
        batch_op.drop_column('can_upload_task_audio')
        batch_op.drop_column('can_uncomplete_task')
        batch_op.drop_column('can_complete_task')
        batch_op.drop_column('can_delete_task')
        batch_op.drop_column('can_edit_task')
        batch_op.drop_column('can_create_task')
        batch_op.drop_column('can_approve_art')
        batch_op.drop_column('can_view_event_reports')
        batch_op.drop_column('can_view_event_registrations')
        batch_op.drop_column('can_duplicate_event')
        batch_op.drop_column('can_cancel_event')
        batch_op.drop_column('can_publish_event')

    with op.batch_alter_table('push_subscription', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_push_subscription_timestamp'))

    op.drop_table('push_subscription')
    op.drop_table('comment')
    op.drop_table('checklist_template')
    # ### end Alembic commands ###